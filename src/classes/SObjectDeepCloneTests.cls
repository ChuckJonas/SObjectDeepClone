@isTest
private class SObjectDeepCloneTest {

	@isTest static void accountWithContacts() {
		Account acc = createAccount();
        insert acc;

        Map<String, Contact> contactsByName = new Map<String,Contact>();
        for(Integer i = 0; i < 5; i++){
            Contact c = createContact(acc.Id, 'Contact', String.valueOf(i));
            contactsByName.put(c.FirstName + c.LastName, c);
        }

        insert contactsByName.values();

        //pass opportunities just to test query gen on multiple children
        SObjectDeepClone cloner = new SObjectDeepClone(acc.Id, new Set<String>{'contacts', 'opportunities'});
        String cloneName = acc.name + ' Copy';
        Account toBeCloned = (Account) cloner.clone;
        toBeCloned.Name = cloneName;   //change name
        Id clonedId = cloner.save();
        System.assertNotEquals(null, clonedId);
        System.assertNotEquals(acc.Id, clonedId);

        Account queriedClonedAccount = [SELECT Name, (SELECT FirstName, LastName FROM Contacts) FROM Account WHERE Id = :clonedId];

        System.assertEquals(cloneName, queriedClonedAccount.Name);
        System.assertEquals(contactsByName.size(), queriedClonedAccount.Contacts.size());
        for(contact c : queriedClonedAccount.Contacts){
            Contact orgContact = contactsByName.get(c.FirstName + c.LastName);
            System.assertNotEquals(null, orgContact);
        }
    }

    //== OBJECT CREATORS... Might need to adjust to pass ORG validations
    private static Account createAccount(){
        return new Account(
            name = 'abc'
        );
    }

    private static Contact createContact(Id accId, String firstName, String lastName){
        return new Contact(
            AccountId = accId,
            FirstName = firstName,
            LastName = lastName
        );
    }

}